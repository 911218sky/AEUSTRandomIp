#!/usr/bin/env bash
set -euo pipefail

#-------------------------------
# Configurable parameters
#-------------------------------
# Seconds between IP rotations
INTERVAL=${INTERVAL:-60}

# Fixed leading octets (1–3 octets), e.g. "192.168", "10.0.1"
PREFIX=${PREFIX:-"120.96.54"}

# Subnet prefix length (e.g. 24 → 255.255.255.0)
PREFIX_LENGTH=${PREFIX_LENGTH:-24}

# Default gateway
GATEWAY=${GATEWAY:-"120.96.54.254"}

# DNS servers (space-separated)
DNS_SERVERS=(${DNS_SERVERS:-"120.96.35.1 120.96.36.1"})
#-------------------------------

# Ensure script is run as root
if [[ $EUID -ne 0 ]]; then
  echo "Please run as root or via sudo."
  exit 1
fi

# Detect default network interface
IFACE=$(ip route show default 2>/dev/null | awk '/default/ {print $5; exit}')
if [[ -z $IFACE ]]; then
  echo "No default network interface found."
  exit 1
fi
echo "Using interface: $IFACE"

# Backup original addresses, route, and DNS
orig_ips=()
while read -r addr; do
  orig_ips+=("$addr")
done < <(ip -4 addr show dev "$IFACE" | awk '/inet/ {print $2}')

orig_gw=$(ip route show default | awk '/default/ {print $3; exit}')
resolv_bak="/tmp/resolv.conf.backup.$$"
cp /etc/resolv.conf "$resolv_bak"

# Restore function
restore() {
  echo
  echo "Restoring original network settings…"
  ip addr flush dev "$IFACE"
  ip route del default || true

  for addr in "${orig_ips[@]}"; do
    echo "  Restoring IP $addr"
    ip addr add "$addr" dev "$IFACE"
  done

  if [[ -n $orig_gw ]]; then
    echo "  Restoring gateway $orig_gw"
    ip route add default via "$orig_gw" dev "$IFACE"
  fi

  echo "  Restoring DNS"
  mv -f "$resolv_bak" /etc/resolv.conf

  echo "✅ Done"
  exit
}

# Trap exit signals
trap restore EXIT INT TERM

# Split PREFIX into octets
IFS='.' read -r -a fixed_octets <<< "$PREFIX"
fixed_count=${#fixed_octets[@]}
if (( fixed_count < 1 || fixed_count > 3 )); then
  echo "PREFIX must have 1–3 octets."
  exit 1
fi
dynamic_count=$((4 - fixed_count))

# Main rotation loop
while true; do
  # Find a free random IP
  attempt=0
  while (( attempt < 50 )); do
    ((attempt++))
    rand_octets=()
    for ((i=0; i<dynamic_count; i++)); do
      # random in 2–254
      rand_octets+=( $((RANDOM%253 + 2)) )
    done
    new_ip="${fixed_octets[*]}.${rand_octets[*]}"
    new_ip=${new_ip// /\.}
    echo "Checking $new_ip …"

    # skip if already assigned
    if ip -4 addr show dev "$IFACE" | grep -q "${new_ip}/"; then
      continue
    fi
    # skip if ping responds
    if ping -c1 -W1 "$new_ip" &>/dev/null; then
      continue
    fi
    break
  done

  if (( attempt >= 50 )); then
    echo "⚠️  Could not find free IP after 50 tries. Exiting."
    break
  fi

  echo "Applying $new_ip/$PREFIX_LENGTH via $GATEWAY"
  ip addr flush dev "$IFACE"
  ip route del default || true
  ip addr add "${new_ip}/${PREFIX_LENGTH}" dev "$IFACE"
  ip route add default via "$GATEWAY" dev "$IFACE"

  # Write DNS
  {
    echo "# generated by ip-rotator"
    for dns in "${DNS_SERVERS[@]}"; do
      echo "nameserver $dns"
    done
  } > /etc/resolv.conf

  echo "✅ Switched to $new_ip"

  # Countdown
  for ((i=INTERVAL; i>0; i--)); do
    printf "\rNext switch in %2d seconds… " "$i"
    sleep 1
  done
  echo
done

# restore on unexpected exit
restore
