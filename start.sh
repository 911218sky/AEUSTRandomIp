#!/usr/bin/env bash
set -euo pipefail

#-------------------------------
# Configurable parameters
#-------------------------------
INTERVAL=${INTERVAL:-60}                     # Seconds between IP rotations
PREFIX=${PREFIX:-24}                         # Subnet prefix length
GATEWAY=${GATEWAY:-120.96.54.254}            # Default gateway
DNS_SERVERS=(${DNS_SERVERS:-"120.96.35.1 120.96.36.1"})
#-------------------------------

# Check for root privileges
if [[ $EUID -ne 0 ]]; then
  echo "Please run this script as root or with sudo."
  exit 1
fi

# Detect default network interface
IFACE=$(ip route show default 2>/dev/null | awk '/default/ {print $5; exit}')
if [[ -z $IFACE ]]; then
  echo "No default network interface found."
  exit 1
fi
echo "Using interface: $IFACE"

# Save original IP(s), gateway, and DNS
orig_ips=()
while read -r line; do
  orig_ips+=("$line")
done < <(ip -4 addr show dev "$IFACE" | awk '/inet/ {print $2}')

orig_gw=$(ip route show default | awk '/default/ {print $3; exit}')
orig_resolv="/tmp/resolv.conf.backup.$$"
cp /etc/resolv.conf "$orig_resolv"

# Restore function
function restore() {
  echo
  echo "Restoring original network settings..."
  # Remove all IPv4 addresses and default route
  ip addr flush dev "$IFACE"
  ip route del default || true

  # Restore original IPs
  for ipnet in "${orig_ips[@]}"; do
    echo "  Restoring IP: $ipnet"
    ip addr add "$ipnet" dev "$IFACE"
  done

  # Restore original gateway
  if [[ -n $orig_gw ]]; then
    echo "  Restoring default gateway: $orig_gw"
    ip route add default via "$orig_gw" dev "$IFACE"
  fi

  # Restore DNS
  echo "  Restoring DNS settings"
  mv -f "$orig_resolv" /etc/resolv.conf

  echo "✅ Original settings restored."
  exit
}

# Trap signals to restore on exit
trap restore EXIT INT TERM

# Main loop: pick random IP, check if free, and apply
while true; do
  attempt=0
  while (( attempt < 50 )); do
    (( attempt++ ))
    octet=$(( RANDOM % 253 + 2 ))    # 2~254
    new_ip="120.96.54.$octet"
    echo "Checking $new_ip ..."
    # Ensure not already assigned locally
    if ip -4 addr show dev "$IFACE" | grep -q "${new_ip}/"; then
      continue
    fi
    # Ping to check if IP is in use
    if ping -c1 -W1 "$new_ip" &>/dev/null; then
      continue
    fi
    break
  done

  if (( attempt >= 50 )); then
    echo "⚠️  Could not find a free IP after 50 attempts, exiting."
    break
  fi

  echo "Applying new IP: $new_ip/$PREFIX via $GATEWAY"
  # Flush old IPs and default route
  ip addr flush dev "$IFACE"
  ip route del default || true

  # Assign new IP and default gateway
  ip addr add "${new_ip}/${PREFIX}" dev "$IFACE"
  ip route add default via "$GATEWAY" dev "$IFACE"

  # Set DNS
  {
    echo "# Generated by ip-rotator"
    for dns in "${DNS_SERVERS[@]}"; do
      echo "nameserver $dns"
    done
  } > /etc/resolv.conf

  echo "✅ Switched to $new_ip"
  sleep "$INTERVAL"
done

# Restore settings on exit
restore